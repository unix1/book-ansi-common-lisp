(defparameter *words* (make-hash-table :size 10000))

(defconstant maxword 100)

(defun read-text (pathname)
  (with-open-file (s pathname :direction :input)
    (let ((buffer (make-string maxword))
          (pos 0))
      (do ((c (read-char s nil :eof)
              (read-char s nil :eof)))
          ((eql c :eof))
        (if (or (alpha-char-p c) (char= c #\'))
          (progn (setf (aref buffer pos) c)
                 (incf pos))
          (progn (unless (zerop pos)
                   (see (string-downcase (subseq buffer 0 pos)))
                   (setf pos 0))
                 (let ((p (punc c)))
                   (if p (see p)))))))))

(defun punc (c)
  (case c
    (#\. '|.|)
    (#\, '|,|)
    (#\; '|;|)
    (#\! '|!|)
    (#\? '|?|)))

(let ((prev1 ".")
      (prev2 ""))
  (defun see (word)
    (let ((pair (assoc word (gethash prev1 *words*))))
      (if (null pair)
        (push (cons word 1) (gethash prev1 *words*))
        (incf (cdr pair))))
    (setf prev1 word)))

(defun generate-text (n &optional (prev1 ".") (prev2 ""))
  (if (zerop n)
    (terpri)
    (let ((next (random-next prev)))
      (format t "~A " next)
      (generate-text (1- n) next))))

(defun random-next (prev1 prev2)
  (let* ((choices (gethash prev *words*))
         (i (random (reduce #'+ choices :key #'cdr))))
    (dolist (pair choices)
      (if (minusp (decf i (cdr pair)))
        (return (car pair))))))
